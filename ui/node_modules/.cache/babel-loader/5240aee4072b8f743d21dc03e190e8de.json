{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nexport default function convertMapToSchema(map) {\n  var schema = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(map); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    var prop = map[key];\n    var type = void 0;\n\n    if (_typeof(prop) === 'object') {\n      prop = Object.keys(map[key])[0];\n      type = convertMapToSchema(map[key][prop]);\n    }\n\n    schema[key] = {\n      prop: prop\n    };\n\n    if (type) {\n      schema[key].type = type;\n    }\n  }\n\n  return schema;\n}","map":{"version":3,"mappings":";;;;;;;;;;AAAA,eAAe,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;EAC/C,IAAMC,MAAM,GAAG,EAAf;;EACA,gCAAkBC,MAAM,CAACC,IAAPD,CAAYF,GAAZE,CAAlB,kCAAoC;IAA/B,IAAME,GAAG,mBAAT;IACJ,IAAIC,IAAI,GAAGL,GAAG,CAACI,GAAD,CAAd;IACA,IAAIE,IAAI,SAAR;;IACA,IAAIC,QAAOF,IAAP,MAAgB,QAApB,EAA8B;MAC7BA,IAAI,GAAGH,MAAM,CAACC,IAAPD,CAAYF,GAAG,CAACI,GAAD,CAAfF,EAAsB,CAAtBA,CAAPG;MACAC,IAAI,GAAGP,kBAAkB,CAACC,GAAG,CAACI,GAAD,CAAHJ,CAASK,IAATL,CAAD,CAAzBM;IACA;;IACDL,MAAM,CAACG,GAAD,CAANH,GAAc;MACbI,IAAI,EAAJA;IADa,CAAdJ;;IAGA,IAAIK,IAAJ,EAAU;MACTL,MAAM,CAACG,GAAD,CAANH,CAAYK,IAAZL,GAAmBK,IAAnBL;IACA;EACD;;EACD,OAAOA,MAAP;AACA","names":["convertMapToSchema","map","schema","Object","keys","key","prop","type","_typeof"],"sources":["../../../source/read/schema/convertMapToSchema.js"],"sourcesContent":["export default function convertMapToSchema(map) {\r\n\tconst schema = {}\r\n\tfor (const key of Object.keys(map)) {\r\n\t\tlet prop = map[key]\r\n\t\tlet type\r\n\t\tif (typeof prop === 'object') {\r\n\t\t\tprop = Object.keys(map[key])[0]\r\n\t\t\ttype = convertMapToSchema(map[key][prop])\r\n\t\t}\r\n\t\tschema[key] = {\r\n\t\t\tprop\r\n\t\t}\r\n\t\tif (type) {\r\n\t\t\tschema[key].type = type\r\n\t\t}\r\n\t}\r\n\treturn schema\r\n}"]},"metadata":{},"sourceType":"module"}