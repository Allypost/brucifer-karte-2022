{"ast":null,"code":"import { resolveComponent as _resolveComponent, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"tree_nav_bar\"\n};\nconst _hoisted_2 = {\n  style: {\n    \"box-shadow\": \"none\"\n  }\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"height\": \"20px\"\n  }\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_item = _resolveComponent(\"item\");\n\n  const _component_vue_over_body = _resolveComponent(\"vue-over-body\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"ul\", {\n    style: _normalizeStyle('background-color:' + _ctx.bgColor)\n  }, [_ctx.tree.length > 1 ? (_openBlock(), _createBlock(_component_item, _mergeProps({\n    key: 0\n  }, _ctx.getItem({}), {\n    icon: \"bars\",\n    label: _ctx.showPath ? _ctx.path : '',\n    href: _ctx.open,\n    style: {\n      \"float\": \"left\"\n    }\n  }), null, 16\n  /* FULL_PROPS */\n  , [\"label\", \"href\"])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.left, item => {\n    return _openBlock(), _createBlock(_component_item, _mergeProps(_ctx.getItem(item), {\n      style: {\n        \"float\": \"left\"\n      },\n      position: -1\n    }), null, 16\n    /* FULL_PROPS */\n    );\n  }), 256\n  /* UNKEYED_FRAGMENT */\n  )), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getRight(), item => {\n    return _openBlock(), _createBlock(_component_item, _mergeProps(_ctx.getItem(item), {\n      style: {\n        \"float\": \"right\"\n      },\n      position: 1\n    }), null, 16\n    /* FULL_PROPS */\n    );\n  }), 256\n  /* UNKEYED_FRAGMENT */\n  ))], 4\n  /* STYLE */\n  ), _createVNode(_component_vue_over_body, {\n    open: _ctx.sideBar,\n    \"dialog-style\": {\n      'position': 'absolute'\n    },\n    before: \"tree_nav_before\",\n    after: \"tree_nav_after\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", {\n      style: _normalizeStyle({\n        'min-width': '300px',\n        'height': '100%',\n        'background-color': _ctx.bgColor,\n        'overflow-y': 'auto'\n      })\n    }, [_createElementVNode(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.tree, item => {\n      return _openBlock(), _createBlock(_component_item, _normalizeProps(_guardReactiveProps(_ctx.getItem(item))), null, 16\n      /* FULL_PROPS */\n      );\n    }), 256\n    /* UNKEYED_FRAGMENT */\n    ))]), _hoisted_3], 4\n    /* STYLE */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"open\"])]);\n}","map":{"version":3,"mappings":";;EAkKOA,KAAK,EAAC;;;EAmCDC,KAAwB,EAAxB;IAAA;EAAA;;;gCAMJC,oBAA+B,KAA/B,EAA+B;EAA1BD,KAAmB,EAAnB;IAAA;EAAA;AAA0B,CAA/B,EAAwB,IAAxB,EAAwB;AAAA;AAAxB;;;;;;;uBAzCNE,oBA4CM,KA5CN,cA4CM,CA3CJD,oBAqBK,IArBL,EAqBK;IArBAD,KAAK,wCAAsBG,YAAtB;EAqBL,CArBL,GAEUA,UAAKC,MAAL,GAAW,mBADnBC,aAOQC,eAPR,cAOQ;IAAAC;EAAA,CAPR,EAEUJ,aAAO,EAAP,CAFV,EAEiB;IACfK,IAAI,EAAC,MADU;IAEdC,KAAK,EAAEN,gBAAWA,SAAX,GAAe,EAFR;IAGdO,IAAI,EAAEP,SAHQ;IAIfH,KAAkB,EAAlB;MAAA;IAAA;EAJe,CAFjB;;EAAA,8EAQAE,oBAKES,SALF,EAKE,IALF,EAKEC,YAJeT,SAIf,EAJOU,IAAY,IAAR;yBADbR,aAKEC,eALF,cAEUH,IAGR,QAHQ,CAAQU,IAAR,CAFV,EAEsB;MACpBb,KAAkB,EAAlB;QAAA;MAAA,CADoB;MAEnBc,QAAQ,EAAE;IAFS,CAFtB;;IAAA;GAKE,CALF;;EAAA,uBAMAZ,oBAKES,SALF,EAKE,IALF,EAKEC,YAJeT,eAIf,EAJOU,IAAgB,IAAZ;yBADbR,aAKEC,eALF,cAEUH,IAGR,QAHQ,CAAQU,IAAR,CAFV,EAEsB;MACpBb,KAAmB,EAAnB;QAAA;MAAA,CADoB;MAEnBc,QAAQ,EAAE;IAFS,CAFtB;;IAAA;GAKE,CALF;;EAAA,GAfF;;EAAA,CA2CI,EArBJC,aAoBgBC,wBApBhB,EAoBgB;IAnBbC,IAAI,EAAEd,YAmBO;IAlBb,gBAAc;MAAA;IAAA,CAkBD;IAjBde,MAAM,EAAC,iBAiBO;IAhBdC,KAAK,EAAC;EAgBQ,CApBhB;sBAME,MAaM,CAbNlB,oBAaM,KAbN,EAaM;MAbAD,KAAK;4BAAA;wBAAA;4BAAwFG,YAAxF;;MAAA;IAaL,CAbN,GAMEF,oBAKK,IALL,cAKK,oBAJHC,oBAGES,SAHF,EAGE,IAHF,EAGEC,YAFeT,SAEf,EAFOU,IAAY,IAAR;2BADbR,aAGEC,eAHF,EAGEc,oCADQjB,aAAQU,IAAR,CACR,EAHF,EAEsB,IAFtB,EAEsB;MAAA;MAFtB;KAGE,CAHF;;IAAA,CAIG,EALL,GAMAQ,WAZF;;IAAA,CAaM;;;;GAnBR;;EAAA,WAqBI,CA5CN","names":["class","style","_createElementVNode","_createElementBlock","_ctx","length","_createBlock","_component_item","key","icon","label","href","_Fragment","_renderList","item","position","_createVNode","_component_vue_over_body","open","before","after","_normalizeProps","_hoisted_3"],"sourceRoot":"","sources":["C:\\brucifer-karte\\brucifer-karte\\bfk2\\brucifer\\ui\\node_modules\\vue-tree-nav\\src\\components\\bar.vue"],"sourcesContent":["<script type=\"text/babel\">\n  import item from './item.vue'\n  import overBody from 'vue-over-body'\n\n  module.exports = {\n    name: 'vue-tree-nav',\n    components: {\n      'item': item,\n      'vue-over-body': overBody\n    },\n    props: {\n      side: {\n        type: Array,\n        default: () => []\n      },\n      left: {\n        type: Array,\n        default: () => []\n      },\n      right: {\n        type: Array,\n        default: () => []\n      },\n      location: {\n        type: String,\n        default: ''\n      },\n      showPath: {\n        type: Boolean,\n        default: true \n      },\n      barScale: {\n        type: Number,\n        default: 1\n      },\n      sideScale: {\n        type: Number,\n        default: 1\n      },\n      bgColor: {\n        type: String,\n        default: '#f3f3f3'\n      },\n      fontColor: {\n        type: String,\n        default: '#666666'\n      },\n      hoverColor: {\n        type: String,\n        default: '#dddddd'\n      },\n      activeColor: {\n        type: String,\n        default: '#000000'\n      }\n    },\n    data: function () {\n      return {\n        sideBar: 0,\n        rightDrop: 0,\n        leftDrop: 0,\n        path: '',\n        tree: [],\n        links: {},\n        Path: []\n      }\n    },\n    mounted: function () {\n      this.setRoutes()\n    },\n    watch: {\n      location: function () {\n        this.setLocation()\n      },\n      side: function () {\n        this.setRoutes()\n      },\n      left: function () {\n        this.setRoutes()\n      },\n      right: function () {\n        this.setRoutes()\n      }\n    },\n    methods: {\n      open: function () {\n        this.$data.sideBar += 1;\n      },\n      close: function () {\n        this.$data.sideBar = 0;\n      },\n      setLocation: function () {\n        this.$data.path = ''\n        Object.keys(this.$data.links).sort().forEach(key => {\n          if (`#${this.location}`.indexOf(key) !== -1) {\n            this.$data.path = this.$data.links[key]\n          }\n        })\n        this.$data.Path = this.$data.path.split(' / ')\n        this.close()\n      },\n      setRoutes: function () {\n        this.$data.tree = [{\n          style: 'text-align:right;',\n          icon: 'times',\n          href: this.close\n        }]\n        this.$data.links = {}\n        this.transverse(this.side, this.$data.tree, '', '#')\n        this.transverse(this.left, [], '', '#')\n        this.transverse(this.right, [], '', '#')\n        this.setLocation ()\n      },\n      transverse: function (Input, Output, label, path) {\n        Input.forEach(input => {\n          var abs = input.path && input.path.substr(0, 1) === '/'\n\n          var newLabel = input.label || input.name || (abs ? input.path.substr(1) : input.path)\n          if ((newLabel || input.icon) && (input.path || '').indexOf(':') === -1 && !input.redirect) {\n            Output.push({})\n            var i = Output.length - 1\n\n            Output[i].icon = input.icon\n            Output[i].label = newLabel\n            newLabel = (label ? `${label} / ` : '') + newLabel\n\n            var newPath = abs ? `#${input.path}` : `${path || ''}/${input.path}`\n            if (input.children) {\n              Output[i].children = []\n              this.transverse(input.children, Output[i].children, newLabel, newPath)\n            } else {\n              Output[i].href = input.href || newPath\n              this.$data.links[input.href || newPath] = newLabel\n            }\n          }\n        })\n      },\n      getRight: function () {\n        var R = []\n        this.right.forEach(r => {\n          R.push(r)\n        })\n        R.reverse()\n        return R\n      },\n      getItem: function (item) {\n        return Object.assign({\n          scale: this.barScale,\n          bgColor: this.bgColor,\n          fontColor: this.fontColor,\n          hoverColor: this.hoverColor,\n          activeColor: this.activeColor,\n          path: this.$data.Path\n        }, item, {\n          path: this.$data.Path\n        })\n      }\n    }\n  }\n</script>\n\n<template>\n  <div class=\"tree_nav_bar\">\n    <ul :style=\"'background-color:'+bgColor\">\n      <item\n        v-if=\"tree.length > 1\"\n        v-bind=\"getItem({})\"\n        icon=\"bars\"\n        :label=\"showPath ? path : ''\"\n        :href=\"open\"\n        style=\"float:left\"\n      ></item>\n      <item\n        v-for=\"item in left\"\n        v-bind=\"getItem(item)\"\n        style=\"float:left\"\n        :position=\"-1\"\n      />\n      <item\n        v-for=\"item in getRight()\"\n        v-bind=\"getItem(item)\"\n        style=\"float:right\"\n        :position=\"1\"\n      />\n    </ul>\n    <vue-over-body\n      :open=\"sideBar\"\n      :dialog-style=\"{'position': 'absolute'}\"\n      before=\"tree_nav_before\"\n      after=\"tree_nav_after\"\n    >\n      <div :style=\"{\n        'min-width': '300px',\n        'height': '100%',\n        'background-color': bgColor,\n        'overflow-y': 'auto'\n      }\">\n        <ul style=\"box-shadow:none;\">\n          <item\n            v-for=\"item in tree\"\n            v-bind=\"getItem(item)\"\n          />\n        </ul>\n        <div style=\"height:20px\"></div>\n      </div>\n    </vue-over-body>\n  </div>\n</template>\n\n<style>\n  .tree_nav_bar {\n    margin-bottom:20px;\n  }\n\n  .tree_nav_bar ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n  }\n\n  .tree_nav_before {\n    height: 100%;\n    top: 0;\n    left: -300px;\n  }\n\n  .tree_nav_after {\n    left: 0;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}