{"ast":null,"code":"import JSZip from 'jszip';\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\n\nexport default function unpackXlsxFile(file) {\n  var files = {};\n  return JSZip.loadAsync(file).then(function (zip) {\n    var files = [];\n    zip.forEach(function (relativePath, zipEntry) {\n      if (!zipEntry.dir) {\n        files.push(zipEntry.name);\n      }\n    });\n    var entries = {};\n    return Promise.all(files.map(function (file) {\n      return zip.file(file).async('string').then(function (content) {\n        return entries[file] = content;\n      });\n    })).then(function () {\n      return entries;\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;EAC5C,IAAMC,KAAK,GAAG,EAAd;EAEA,OAAOH,KAAK,CAACI,SAANJ,CAAgBE,IAAhBF,EAAsBK,IAAtBL,CAA2B,UAACM,GAAD,EAAS;IAC1C,IAAMH,KAAK,GAAG,EAAd;IACAG,GAAG,CAACC,OAAJD,CAAY,UAACE,YAAD,EAAeC,QAAf,EAA4B;MACvC,IAAI,CAACA,QAAQ,CAACC,GAAd,EAAmB;QAClBP,KAAK,CAACQ,IAANR,CAAWM,QAAQ,CAACG,IAApBT;MACA;IAHF;IAMA,IAAMU,OAAO,GAAG,EAAhB;IACA,OAAOC,OAAO,CAACC,GAARD,CAAYX,KAAK,CAACa,GAANb,CAAU,UAACD,IAAD,EAAU;MACtC,OAAOI,GAAG,CAACJ,IAAJI,CAASJ,IAATI,EAAeW,KAAfX,CAAqB,QAArBA,EAA+BD,IAA/BC,CAAoC,mBAAO;QAAA,OAAIO,OAAO,CAACX,IAAD,CAAPW,GAAgBK,OAApB;MAA3C,EAAP;IADkB,EAAZJ,EAGNT,IAHMS,CAGD;MAAA,OAAMD,OAAN;IAHC,EAAP;EATM,EAAP;AAcA","names":["JSZip","unpackXlsxFile","file","files","loadAsync","then","zip","forEach","relativePath","zipEntry","dir","push","name","entries","Promise","all","map","async","content"],"sources":["../../source/read/unpackXlsxFileBrowser.js"],"sourcesContent":["import JSZip from 'jszip'\r\n\r\n/**\r\n * Reads XLSX file in a browser.\r\n * @param  {file} file - A file being uploaded in the browser.\r\n * @return {Promise} Resolves to an object holding XLSX file entries.\r\n */\r\nexport default function unpackXlsxFile(file) {\r\n\tconst files = {}\r\n\r\n\treturn JSZip.loadAsync(file).then((zip) => {\r\n\t\tconst files = []\r\n\t\tzip.forEach((relativePath, zipEntry) => {\r\n\t\t\tif (!zipEntry.dir) {\r\n\t\t\t\tfiles.push(zipEntry.name)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst entries = {}\r\n\t\treturn Promise.all(files.map((file) => {\r\n\t\t\treturn zip.file(file).async('string').then(content => entries[file] = content)\r\n\t\t}))\r\n\t\t.then(() => entries)\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}