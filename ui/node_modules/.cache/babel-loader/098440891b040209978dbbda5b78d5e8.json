{"ast":null,"code":"import parseDate from './parseDate.js';\nimport isDateTimestamp from './isDateTimestamp.js'; // Parses a string `value` of a cell.\n\nexport default function parseCellValue(value, type, _ref) {\n  var getInlineStringValue = _ref.getInlineStringValue,\n      getInlineStringXml = _ref.getInlineStringXml,\n      getStyleId = _ref.getStyleId,\n      styles = _ref.styles,\n      values = _ref.values,\n      properties = _ref.properties,\n      options = _ref.options;\n\n  if (!type) {\n    // Default cell type is \"n\" (numeric).\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\n    type = 'n';\n  } // Available Excel cell types:\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n  //\n  // Some other document (seems to be old):\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\n  //\n\n\n  switch (type) {\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\n    // using \"s\" cell type (for saving on strage space).\n    // \"str\" cell type is then generally only used for storing\n    // formula-pre-calculated cell values.\n    case 'str':\n      value = parseString(value, options);\n      break;\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\n    // Perhaps the specification doesn't force it to use one or another.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\n\n    case 'inlineStr':\n      value = getInlineStringValue();\n\n      if (value === undefined) {\n        throw new Error(\"Unsupported \\\"inline string\\\" cell value structure: \".concat(getInlineStringXml()));\n      }\n\n      value = parseString(value, options);\n      break;\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\n    // \"Shared\" strings is a way for an Excel editor to reduce\n    // the file size by storing \"commonly used\" strings in a dictionary\n    // and then referring to such strings by their index in that dictionary.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\n\n    case 's':\n      // If a cell has no value then there's no `<c/>` element for it.\n      // If a `<c/>` element exists then it's not empty.\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\n      var sharedStringIndex = Number(value);\n\n      if (isNaN(sharedStringIndex)) {\n        throw new Error(\"Invalid \\\"shared\\\" string index: \".concat(value));\n      }\n\n      if (sharedStringIndex >= values.length) {\n        throw new Error(\"An out-of-bounds \\\"shared\\\" string index: \".concat(value));\n      }\n\n      value = values[sharedStringIndex];\n      value = parseString(value, options);\n      break;\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\n    // in cells of type \"b\".\n\n    case 'b':\n      if (value === '1') {\n        value = true;\n      } else if (value === '0') {\n        value = false;\n      } else {\n        throw new Error(\"Unsupported \\\"boolean\\\" cell value: \".concat(value));\n      }\n\n      break;\n    // XLSX specification seems to support cells of type \"z\":\n    // blank \"stub\" cells that should be ignored by data processing utilities.\n\n    case 'z':\n      value = undefined;\n      break;\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\n    // It's not clear what that means though.\n    // They also wrote: \"and `w` property stores its common name\".\n    // It's unclear what they meant by that.\n\n    case 'e':\n      value = decodeError(value);\n      break;\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\n    // I haven't seen an XLSX file having such cells.\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\n\n    case 'd':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedDate = new Date(value);\n\n      if (isNaN(parsedDate)) {\n        throw new Error(\"Unsupported \\\"date\\\" cell value: \".concat(value));\n      }\n\n      value = parsedDate;\n      break;\n    // Numeric cells have type \"n\".\n\n    case 'n':\n      if (value === undefined) {\n        break;\n      }\n\n      var parsedNumber = Number(value);\n\n      if (isNaN(parsedNumber)) {\n        throw new Error(\"Invalid \\\"numeric\\\" cell value: \".concat(value));\n      }\n\n      value = parsedNumber; // XLSX does have \"d\" type for dates, but it's not commonly used.\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\n\n      if (isDateTimestamp(value, getStyleId(), styles, options)) {\n        // Parse the number as a date timestamp.\n        value = parseDate(value, properties);\n      }\n\n      break;\n\n    default:\n      throw new TypeError(\"Cell type not supported: \".concat(type));\n  } // Convert empty values to `null`.\n\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  return value;\n} // Decodes numeric error code to a string code.\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\n\nfunction decodeError(errorCode) {\n  // While the error values are determined by the application,\n  // the following are some example error values that could be used:\n  switch (errorCode) {\n    case 0x00:\n      return '#NULL!';\n\n    case 0x07:\n      return '#DIV/0!';\n\n    case 0x0F:\n      return '#VALUE!';\n\n    case 0x17:\n      return '#REF!';\n\n    case 0x1D:\n      return '#NAME?';\n\n    case 0x24:\n      return '#NUM!';\n\n    case 0x2A:\n      return '#N/A';\n\n    case 0x2B:\n      return '#GETTING_DATA';\n\n    default:\n      // Such error code doesn't exist. I made it up.\n      return \"#ERROR_\".concat(errorCode);\n  }\n}\n\nfunction parseString(value, options) {\n  // In some weird cases, a developer might want to disable\n  // the automatic trimming of all strings.\n  // For example, leading spaces might express a tree-like hierarchy.\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\n  if (options.trim !== false) {\n    value = value.trim();\n  }\n\n  if (value === '') {\n    value = undefined;\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["parseDate","isDateTimestamp","parseCellValue","value","type","getInlineStringValue","getInlineStringXml","getStyleId","styles","values","properties","options","parseString","undefined","Error","sharedStringIndex","Number","isNaN","length","decodeError","parsedDate","Date","parsedNumber","TypeError","errorCode","trim"],"sources":["../../source/read/parseCellValue.js"],"sourcesContent":["import parseDate from './parseDate.js'\r\nimport isDateTimestamp from './isDateTimestamp.js'\r\n\r\n// Parses a string `value` of a cell.\r\nexport default function parseCellValue(value, type, {\r\n  getInlineStringValue,\r\n  getInlineStringXml,\r\n  getStyleId,\r\n  styles,\r\n  values,\r\n  properties,\r\n  options\r\n}) {\r\n  if (!type) {\r\n    // Default cell type is \"n\" (numeric).\r\n    // http://www.datypic.com/sc/ooxml/t-ssml_CT_Cell.html\r\n    type = 'n'\r\n  }\r\n\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    // XLSX tends to store all strings as \"shared\" (indexed) ones\r\n    // using \"s\" cell type (for saving on strage space).\r\n    // \"str\" cell type is then generally only used for storing\r\n    // formula-pre-calculated cell values.\r\n    case 'str':\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // Sometimes, XLSX stores strings as \"inline\" strings rather than \"shared\" (indexed) ones.\r\n    // Perhaps the specification doesn't force it to use one or another.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"inlineStr\"><is><t>Test 123</t></is></c></row></sheetData>`.\r\n    case 'inlineStr':\r\n      value = getInlineStringValue()\r\n      if (value === undefined) {\r\n        throw new Error(`Unsupported \"inline string\" cell value structure: ${getInlineStringXml()}`)\r\n      }\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // XLSX tends to store string values as \"shared\" (indexed) ones.\r\n    // \"Shared\" strings is a way for an Excel editor to reduce\r\n    // the file size by storing \"commonly used\" strings in a dictionary\r\n    // and then referring to such strings by their index in that dictionary.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"s\"><v>0</v></c></row></sheetData>`.\r\n    case 's':\r\n      // If a cell has no value then there's no `<c/>` element for it.\r\n      // If a `<c/>` element exists then it's not empty.\r\n      // The `<v/>`alue is a key in the \"shared strings\" dictionary of the\r\n      // XLSX file, so look it up in the `values` dictionary by the numeric key.\r\n      const sharedStringIndex = Number(value)\r\n      if (isNaN(sharedStringIndex)) {\r\n        throw new Error(`Invalid \"shared\" string index: ${value}`)\r\n      }\r\n      if (sharedStringIndex >= values.length) {\r\n        throw new Error(`An out-of-bounds \"shared\" string index: ${value}`)\r\n      }\r\n      value = values[sharedStringIndex]\r\n      value = parseString(value, options)\r\n      break\r\n\r\n    // Boolean (TRUE/FALSE) values are stored as either \"1\" or \"0\"\r\n    // in cells of type \"b\".\r\n    case 'b':\r\n      if (value === '1') {\r\n        value = true\r\n      } else if (value === '0') {\r\n        value = false\r\n      } else {\r\n        throw new Error(`Unsupported \"boolean\" cell value: ${value}`)\r\n      }\r\n      break\r\n\r\n    // XLSX specification seems to support cells of type \"z\":\r\n    // blank \"stub\" cells that should be ignored by data processing utilities.\r\n    case 'z':\r\n      value = undefined\r\n      break\r\n\r\n    // XLSX specification also defines cells of type \"e\" containing a numeric \"error\" code.\r\n    // It's not clear what that means though.\r\n    // They also wrote: \"and `w` property stores its common name\".\r\n    // It's unclear what they meant by that.\r\n    case 'e':\r\n      value = decodeError(value)\r\n      break\r\n\r\n    // XLSX supports date cells of type \"d\", though seems like it (almost?) never\r\n    // uses it for storing dates, preferring \"n\" numeric timestamp cells instead.\r\n    // The value of a \"d\" cell is supposedly a string in \"ISO 8601\" format.\r\n    // I haven't seen an XLSX file having such cells.\r\n    // Example: `<sheetData><row r=\"1\"><c r=\"A1\" s=\"1\" t=\"d\"><v>2021-06-10T00:47:45.700Z</v></c></row></sheetData>`.\r\n    case 'd':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      const parsedDate = new Date(value)\r\n      if (isNaN(parsedDate)) {\r\n        throw new Error(`Unsupported \"date\" cell value: ${value}`)\r\n      }\r\n      value = parsedDate\r\n      break\r\n\r\n    // Numeric cells have type \"n\".\r\n    case 'n':\r\n      if (value === undefined) {\r\n        break\r\n      }\r\n      const parsedNumber = Number(value)\r\n      if (isNaN(parsedNumber)) {\r\n        throw new Error(`Invalid \"numeric\" cell value: ${value}`)\r\n      }\r\n      value = parsedNumber\r\n      // XLSX does have \"d\" type for dates, but it's not commonly used.\r\n      // Instead, it prefers using \"n\" type for storing dates as timestamps.\r\n      if (isDateTimestamp(value, getStyleId(), styles, options)) {\r\n        // Parse the number as a date timestamp.\r\n        value = parseDate(value, properties)\r\n      }\r\n      break\r\n\r\n    default:\r\n      throw new TypeError(`Cell type not supported: ${type}`)\r\n  }\r\n\r\n  // Convert empty values to `null`.\r\n  if (value === undefined) {\r\n    value = null\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n// Decodes numeric error code to a string code.\r\n// https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\nfunction decodeError(errorCode) {\r\n  // While the error values are determined by the application,\r\n  // the following are some example error values that could be used:\r\n  switch (errorCode) {\r\n    case 0x00:\r\n      return '#NULL!'\r\n    case 0x07:\r\n      return '#DIV/0!'\r\n    case 0x0F:\r\n      return '#VALUE!'\r\n    case 0x17:\r\n      return '#REF!'\r\n    case 0x1D:\r\n      return '#NAME?'\r\n    case 0x24:\r\n      return '#NUM!'\r\n    case 0x2A:\r\n      return '#N/A'\r\n    case 0x2B:\r\n      return '#GETTING_DATA'\r\n    default:\r\n      // Such error code doesn't exist. I made it up.\r\n      return `#ERROR_${errorCode}`\r\n  }\r\n}\r\n\r\nfunction parseString(value, options) {\r\n  // In some weird cases, a developer might want to disable\r\n  // the automatic trimming of all strings.\r\n  // For example, leading spaces might express a tree-like hierarchy.\r\n  // https://github.com/catamphetamine/read-excel-file/pull/106#issuecomment-1136062917\r\n  if (options.trim !== false) {\r\n    value = value.trim()\r\n  }\r\n  if (value === '') {\r\n    value = undefined\r\n  }\r\n  return value\r\n}"]},"metadata":{},"sourceType":"module"}