{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nexport default function dropEmptyRows(data) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      rowMap = _ref.rowMap,\n      _ref$accessor = _ref.accessor,\n      accessor = _ref$accessor === void 0 ? function (_) {\n    return _;\n  } : _ref$accessor,\n      onlyTrimAtTheEnd = _ref.onlyTrimAtTheEnd; // Drop empty rows.\n\n\n  var i = data.length - 1;\n\n  while (i >= 0) {\n    // Check if the row is empty.\n    var empty = true;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(data[i]), _step; !(_step = _iterator()).done;) {\n      var cell = _step.value;\n\n      if (accessor(cell) !== null) {\n        empty = false;\n        break;\n      }\n    } // Remove the empty row.\n\n\n    if (empty) {\n      data.splice(i, 1);\n\n      if (rowMap) {\n        rowMap.splice(i, 1);\n      }\n    } else if (onlyTrimAtTheEnd) {\n      break;\n    }\n\n    i--;\n  }\n\n  return data;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,eAAe,SAASA,aAAT,CAAuBC,IAAvB,EAIP;EAAA,+EAAJ,EAAI;EAAA,IAHNC,MAGM,QAHNA,MAGM;EAAA,yBAFNC,QAEM;EAAA,IAFNA,QAEM,8BAFK,aAAC;IAAA,OAAIC,CAAJ;EAEN;EAAA,IADNC,gBACM,QADNA,gBACM,EACN;;;EACA,IAAIC,CAAC,GAAGL,IAAI,CAACM,MAALN,GAAc,CAAtB;;EACA,OAAOK,CAAC,IAAI,CAAZ,EAAe;IACb;IACA,IAAIE,KAAK,GAAG,IAAZ;;IACA,qDAAmBP,IAAI,CAACK,CAAD,CAAvB,wCAA4B;MAAA,IAAjBG,IAAiB;;MAC1B,IAAIN,QAAQ,CAACM,IAAD,CAARN,KAAmB,IAAvB,EAA6B;QAC3BK,KAAK,GAAG,KAARA;QACA;MACD;IAPU,EASb;;;IACA,IAAIA,KAAJ,EAAW;MACTP,IAAI,CAACS,MAALT,CAAYK,CAAZL,EAAe,CAAfA;;MACA,IAAIC,MAAJ,EAAY;QACVA,MAAM,CAACQ,MAAPR,CAAcI,CAAdJ,EAAiB,CAAjBA;MACD;IAJH,OAKO,IAAIG,gBAAJ,EAAsB;MAC3B;IACD;;IACDC,CAAC;EACF;;EACD,OAAOL,IAAP;AACD","names":["dropEmptyRows","data","rowMap","accessor","_","onlyTrimAtTheEnd","i","length","empty","cell","splice"],"sources":["../../source/read/dropEmptyRows.js"],"sourcesContent":["export default function dropEmptyRows(data, {\r\n  rowMap,\r\n  accessor = _ => _,\r\n  onlyTrimAtTheEnd\r\n} = {}) {\r\n  // Drop empty rows.\r\n  let i = data.length - 1\r\n  while (i >= 0) {\r\n    // Check if the row is empty.\r\n    let empty = true\r\n    for (const cell of data[i]) {\r\n      if (accessor(cell) !== null) {\r\n        empty = false\r\n        break\r\n      }\r\n    }\r\n    // Remove the empty row.\r\n    if (empty) {\r\n      data.splice(i, 1)\r\n      if (rowMap) {\r\n        rowMap.splice(i, 1)\r\n      }\r\n    } else if (onlyTrimAtTheEnd) {\r\n      break\r\n    }\r\n    i--\r\n  }\r\n  return data\r\n}"]},"metadata":{},"sourceType":"module"}